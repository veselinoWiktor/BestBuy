@page
@using Newtonsoft.Json
@model IndexModel
@{
    ViewData["Title"] = "Home page";
    var data = Model.Pictures.Select(x => x.Key).ToArray();
    var brandRates = Model.Pictures.Select(x => new { x.Key, Rates = x.Value.Select(z => z.Rate).ToList(), Urls = x.Value.Select(z => z.Url).ToList() }).ToList();
    var serializedCommondata = JsonConvert.SerializeObject(brandRates);
    var brands = JsonConvert.SerializeObject(data);
    var maxRatesCount = brandRates.Select(x => x.Rates.Count()).Max();
    //var rates = JsonConvert.SerializeObject(brandRates.Select(z => z.Rates));
    var urls = JsonConvert.SerializeObject(brandRates.Select(z => z.Urls));
    var sumarizedRates = JsonConvert.SerializeObject(brandRates.Select(z => z.Rates.Sum()).ToList());
    var sumarizedUrls = JsonConvert.SerializeObject(brandRates.Select(z => z.Urls.Count).ToList());

}
<div>
    <p>Total: </p>
    <ul>
        @foreach (var brand in brandRates)
        {

            <li>
              <span><b>Brand:</b> </span>  @brand.Key <span><b>Total rates:</b> @brand.Rates.Count</span>
            </li>

        }
    </ul>
</div>
<div class="row">
    <div class="col-md-5">
        <div id="main" style="width: 600px;height:400px;"></div>
    </div>

    <div class="col-md-8" style="margin-left:10px">
        <div id="chart" style="width: 600px;height:400px;"></div>
    </div>
    <div class="col-md-8" style="margin-left:10px">
        <div id="comparing" style="width: 900px;height:400px;"></div>
    </div>
</div>




@section Scripts{

    <script type="text/javascript">
        var chartDom = document.getElementById('main');
        var myChart = echarts.init(chartDom);
        var option;

        option = {

            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    // Use axis to trigger tooltip
                    type: 'shadow' // 'shadow' as default; can also be 'line' or 'shadow'
                }
            },
            legend: {},
            grid: {
                left: '3%',
                right: '4%',
                bottom: '3%',
                containLabel: true
            },
            xAxis: {
                type: 'value'
            },
            yAxis: {
                type: 'category',
                data: @Html.Raw(brands)
                                                                                                                                                  },
            series: [
                {
                    name: 'Rate',
                    type: 'bar',
                    stack: 'total',
                    label: {
                        show: true
                    },
                    emphasis: {
                        focus: 'series'
                    },
                    data: @Html.Raw(sumarizedRates)
                                                                                                                                                        },
                {
                    name: 'Pictures',
                    type: 'bar',
                    stack: 'total',
                    label: {
                        show: true
                    },
                    emphasis: {
                        focus: 'series'
                    },
                    data: @Html.Raw(sumarizedUrls)
                                                                                                                                                        }
            ]
        };

        option && myChart.setOption(option);
    </script>
    <script>

        var app = {};

        var chartDom = document.getElementById('chart');
        var myChart = echarts.init(chartDom);
        var option;

        const posList = [
            'left',
            'right',
            'top',
            'bottom',
            'inside',
            'insideTop',
            'insideLeft',
            'insideRight',
            'insideBottom',
            'insideTopLeft',
            'insideTopRight',
            'insideBottomLeft',
            'insideBottomRight'
        ];
        app.configParameters = {
            rotate: {
                min: -90,
                max: 90
            },
            align: {
                options: {
                    left: 'left',
                    center: 'center',
                    right: 'right'
                }
            },
            verticalAlign: {
                options: {
                    top: 'top',
                    middle: 'middle',
                    bottom: 'bottom'
                }
            },
            position: {
                options: posList.reduce(function(map, pos) {
                    map[pos] = pos;
                    return map;
                }, {})
            },
            distance: {
                min: 0,
                max: 100
            }
        };
        app.config = {
            rotate: 90,
            align: 'left',
            verticalAlign: 'middle',
            position: 'insideBottom',
            distance: 15,
            onChange: function() {
                const labelOption = {
                    rotate: app.config.rotate,
                    align: app.config.align,
                    verticalAlign: app.config.verticalAlign,
                    position: app.config.position,
                    distance: app.config.distance
                };
                myChart.setOption({
                    series: [
                        {
                            label: labelOption
                        },
                        {
                            label: labelOption
                        },
                        {
                            label: labelOption
                        },
                        {
                            label: labelOption
                        }
                    ]
                });
            }
        };
        const labelOption = {
            show: true,
            position: app.config.position,
            distance: app.config.distance,
            align: app.config.align,
            verticalAlign: app.config.verticalAlign,
            rotate: app.config.rotate,
            formatter: '{c}  {name|{a}}',
            fontSize: 16,
            rich: {
                name: {}
            }
        };
        option = {
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'shadow'
                }
            },
            legend: {
                data: ['Rate', 'Urls']
            },
            toolbox: {
                show: true,
                orient: 'vertical',
                left: 'right',
                top: 'center',
                feature: {
                    mark: { show: true },
                    dataView: { show: true, readOnly: false },
                    magicType: { show: true, type: ['line', 'bar', 'stack'] },
                    restore: { show: true },
                    saveAsImage: { show: true }
                }
            },
            xAxis: [
                {
                    type: 'category',
                    axisTick: { show: false },
                    data: @Html.Raw(brands)
                                                                                            }
            ],
            yAxis: [
                {
                    type: 'value'
                }
            ],
            series: [
                {
                    name: 'Rate',
                    type: 'bar',
                    barGap: 0,
                    label: labelOption,
                    emphasis: {
                        focus: 'series'
                    },
                    data: @Html.Raw(sumarizedRates)
                                                                                            },
                {
                    name: 'Urls',
                    type: 'bar',
                    label: labelOption,
                    emphasis: {
                        focus: 'series'
                    },
                    data: @Html.Raw(sumarizedUrls)
                                                                                            }
            ]
        };
        option && myChart.setOption(option);

    </script>
    <script>
        var chartDom = document.getElementById('comparing');
        var myChart = echarts.init(chartDom);
        var option;

        option = {
           
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'cross',
                    label: {
                        backgroundColor: '#6a7985'
                    }
                }
            },
            legend: {
                data: brands()
            },
            toolbox: {
                feature: {
                    saveAsImage: {}
                }
            },
            grid: {
                left: '3%',
                right: '4%',
                bottom: '3%',
                containLabel: true
            },
            xAxis: [
                {
                    type: 'category',
                    data: range()
                        }
            ],
            yAxis: [
                {

                    boundaryGap: false,
                    type: 'value',
                    data: brands()
                }
            ],
            series: data()

        };

        option && myChart.setOption(option);

        function data() {

            let companies = [];
          
            var rawData = @Html.Raw(serializedCommondata);
          
            for (let i = 0; i < rawData.length; i++) {
                  let data = {};
                data.name = rawData[i].Key;
              
                data.type = 'line';
                data.stack = 'Total';
                data.areaStyle = {};
                data.emphasis = {
                    focus: 'series'
                };
                data.data = rawData[i].Rates;
               
                companies.push(data);
              
                console.log(companies);
            }
          
            return companies;
        };
        function brands() {
            var raw = @Html.Raw(brands);
            var brands = [];

            for (let i = 0; i < raw.length; i++) {
                brands.push(raw[i]);

            }
        
            return brands;
        }
        function range() {
            var max = @Html.Raw(maxRatesCount);
            var arr = [];
            for (let i = 1; i <= max; i++) {
                arr.push(i);

            }
            return arr;
        }
    </script>
 }